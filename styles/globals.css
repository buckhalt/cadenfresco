@import 'tailwindcss';

@import './colors.css';
@import './themes/default.css';

@plugin '@tailwindcss/forms';
@plugin 'tailwindcss-animate';
@plugin './plugins/tailwind-motion-spring.ts';
@plugin './plugins//tailwind-elevation.ts';

@theme {
  --color-*: initial;

  /* 
    Semantic colors 
  */
  --color-background: oklch(var(--background));

  /* Components should redefine --text so that children inherit the correct color */
  --color-text: oklch(var(--text));

  --color-neutral: oklch(var(--neutral));
  --color-neutral-contrast: oklch(var(--neutral-contrast));

  --color-primary: oklch(var(--primary));
  --color-primary-contrast: oklch(var(--primary-contrast));

  --color-accent: oklch(var(--accent));
  --color-accent-contrast: oklch(var(--accent-contrast));

  --color-secondary: oklch(var(--secondary));
  --color-secondary-contrast: oklch(var(--secondary-contrast));

  --color-surface: oklch(var(--surface));
  --color-surface-contrast: oklch(var(--surface-contrast));
  --color-surface-1: oklch(var(--surface-1));
  --color-surface-1-contrast: oklch(var(--surface-1-contrast));
  --color-surface-2: oklch(var(--surface-2));
  --color-surface-2-contrast: oklch(var(--surface-2-contrast));
  --color-surface-3: oklch(var(--surface-3));
  --color-surface-3-contrast: oklch(var(--surface-3-contrast));

  /* States */
  --color-destructive: oklch(var(--destructive));
  --color-destructive-contrast: oklch(var(--destructive-contrast));

  --color-warning: oklch(var(--warning));
  --color-warning-contrast: oklch(var(--warning-contrast));

  --color-success: oklch(var(--success));
  --color-success-contrast: oklch(var(--success-contrast));

  --color-info: oklch(var(--info));
  --color-info-contrast: oklch(var(--info-contrast));

  --color-selected: oklch(var(--selected));

  --ring: oklch(var(--ring));

  /* UI elements */
  --color-link: oklch(var(--link));

  --color-input: oklch(var(--input));
  --color-input-contrast: oklch(var(--input-contrast));
  --color-input-placeholder: oklch(var(--input-placeholder));

  --color-overlay: oklch(var(--overlay));

  /* Color sequences */
  --color-node-1: oklch(var(--node-1));
  --color-node-1-contrast: oklch(var(--node-1-contrast));
  --color-node-2: oklch(var(--node-2));
  --color-node-2-contrast: oklch(var(--node-2-contrast));
  --color-node-3: oklch(var(--node-3));
  --color-node-3-contrast: oklch(var(--node-3-contrast));
  --color-node-4: oklch(var(--node-4));
  --color-node-4-contrast: oklch(var(--node-4-contrast));
  --color-node-5: oklch(var(--node-5));
  --color-node-5-contrast: oklch(var(--node-5-contrast));
  --color-node-6: oklch(var(--node-6));
  --color-node-6-contrast: oklch(var(--node-6-contrast));
  --color-node-7: oklch(var(--node-7));
  --color-node-7-contrast: oklch(var(--node-7-contrast));
  --color-node-8: oklch(var(--node-8));
  --color-node-8-contrast: oklch(var(--node-8-contrast));

  --color-edge-1: oklch(var(--edge-1));
  --color-edge-2: oklch(var(--edge-2));
  --color-edge-3: oklch(var(--edge-3));
  --color-edge-4: oklch(var(--edge-4));
  --color-edge-5: oklch(var(--edge-5));
  --color-edge-6: oklch(var(--edge-6));
  --color-edge-7: oklch(var(--edge-7));
  --color-edge-8: oklch(var(--edge-8));
  --color-edge-9: oklch(var(--edge-9));
  --color-edge-10: oklch(var(--edge-10));

  --color-ord-1: oklch(var(--ord-1));
  --color-ord-2: oklch(var(--ord-2));
  --color-ord-3: oklch(var(--ord-3));
  --color-ord-4: oklch(var(--ord-4));
  --color-ord-5: oklch(var(--ord-5));
  --color-ord-6: oklch(var(--ord-6));
  --color-ord-7: oklch(var(--ord-7));
  --color-ord-8: oklch(var(--ord-8));
  --color-ord-9: oklch(var(--ord-9));
  --color-ord-10: oklch(var(--ord-10));

  --color-cat-1: oklch(var(--cat-1));
  --color-cat-2: oklch(var(--cat-2));
  --color-cat-3: oklch(var(--cat-3));
  --color-cat-4: oklch(var(--cat-4));
  --color-cat-5: oklch(var(--cat-5));
  --color-cat-6: oklch(var(--cat-6));
  --color-cat-7: oklch(var(--cat-7));
  --color-cat-8: oklch(var(--cat-8));
  --color-cat-9: oklch(var(--cat-9));
  --color-cat-10: oklch(var(--cat-10));

  /* Named colors */
  --color-neon-coral: oklch(var(--neon-coral));
  --color-neon-coral-dark: oklch(var(--neon-coral--dark));

  --color-sea-green: oklch(var(--sea-green));
  --color-sea-green-dark: oklch(var(--sea-green--dark));

  --color-slate-blue: oklch(var(--slate-blue));
  --color-slate-blue-dark: oklch(var(--slate-blue--dark));

  --color-navy-taupe: oklch(var(--navy-taupe));
  --color-navy-taupe-dark: oklch(var(--navy-taupe--dark));

  --color-cyber-grape: oklch(var(--cyber-grape));
  --color-cyber-grape-dark: oklch(var(--cyber-grape--dark));

  --color-mustard: oklch(var(--mustard));
  --color-mustard-dark: oklch(var(--mustard--dark));

  --color-rich-black: oklch(var(--rich-black));
  --color-rich-black-dark: oklch(var(--rich-black--dark));

  --color-charcoal: oklch(var(--charcoal));
  --color-charcoal-dark: oklch(var(--charcoal--dark));

  --color-platinum: oklch(var(--platinum));
  --color-platinum-dark: oklch(var(--platinum--dark));

  --color-sea-serpent: oklch(var(--sea-serpent));
  --color-sea-serpent-dark: oklch(var(--sea-serpent--dark));

  --color-purple-pizazz: oklch(var(--purple-pizazz));
  --color-purple-pizazz-dark: oklch(var(--purple-pizazz--dark));

  --color-paradise-pink: oklch(var(--paradise-pink));
  --color-paradise-pink-dark: oklch(var(--paradise-pink--dark));

  --color-cerulean-blue: oklch(var(--cerulean-blue));
  --color-cerulean-blue-dark: oklch(var(--cerulean-blue--dark));

  --color-kiwi: oklch(var(--kiwi));
  --color-kiwi-dark: oklch(var(--kiwi--dark));

  --color-neon-carrot: oklch(var(--neon-carrot));
  --color-neon-carrot-dark: oklch(var(--neon-carrot--dark));

  --color-barbie-pink: oklch(var(--barbie-pink));
  --color-barbie-pink-dark: oklch(var(--barbie-pink--dark));

  --color-tomato: oklch(var(--tomato));
  --color-tomato-dark: oklch(var(--tomato--dark));

  --color-transparent: transparent;
  --color-white: oklch(var(--white));
  --color-black: oklch(var(--black));

  /*
    Spacing
  */
  --spacing-*: initial;
  --spacing: 0.25rem;

  /*
    Breakpoints/Containers
  */
  --breakpoint-*: initial;

  /* Device-based breakpoints */
  --breakpoint-mobile: 20rem; /* 320px - minimum mobile */
  --breakpoint-tablet: 48rem; /* 768px - small tablets, iPad Mini */
  --breakpoint-laptop: 80rem; /* 1280px - small laptops, iPad Pro 12.9" */
  --breakpoint-desktop: 120rem; /* 1920px - full HD desktop */
  --breakpoint-desktop-lg: 160rem; /* 2560px - 2K/4K displays */

  /*
    Border radius
  */

  --radius-*: initial;
  --radius-none: 0px;
  --radius-sm: 0.125rem;
  --radius: 0.25rem;
  --radius-md: 0.375rem;
  --radius-lg: 0.5rem;
  --radius-xl: 0.75rem;
  --radius-2xl: 1rem;
  --radius-3xl: 1.5rem;
  --radius-full: 9999px;
  --radius-input: 0.75rem;

  /*
    Animation
  */

  --animate-wiggle: wiggle 1s ease-in-out infinite;
  --animate-shake: shake 0.82s cubic-bezier(0.36, 0.07, 0.19, 0.97) both;
  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;
  --animate-indeterminate-progress-bar: indeterminate-progress-bar 1s infinite
    linear;
  --animate-background-gradient: background-gradient 5s infinite ease-in-out;
  --animate-linking: linking 1s ease-in-out infinite;

  --transform-origin-left-right: 0% 50%;

  @keyframes wiggle {
    0%,
    100% {
      transform: rotate(-3deg);
    }
    50% {
      transform: rotate(3deg);
    }
  }
  @keyframes accordion-down {
    from {
      height: 0;
    }
    to {
      height: var(--radix-accordion-content-height);
    }
  }
  @keyframes accordion-up {
    from {
      height: var(--radix-accordion-content-height);
    }
    to {
      height: 0;
    }
  }
  @keyframes indeterminate-progress-bar {
    0% {
      transform: translateX(0) scaleX(0);
    }
    40% {
      transform: translateX(0) scaleX(0.4);
    }
    100% {
      transform: translateX(100%) scaleX(0.5);
    }
  }
  @keyframes background-gradient {
    0%,
    50% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }
  @keyframes shake {
    10%,
    90% {
      transform: translate3d(-1px, 0, 0);
    }
    20%,
    80% {
      transform: translate3d(2px, 0, 0);
    }
    30%,
    50%,
    70% {
      transform: translate3d(-4px, 0, 0);
    }
    40%,
    60% {
      transform: translate3d(4px, 0, 0);
    }
  }

  @keyframes linking {
    0% {
      transform: scale(0.8);
    }

    50% {
      transform: scale(1);
    }

    100% {
      transform: scale(0.8);
    }
  }
}

@layer base {
  body {
    @apply bg-background text-text;
    font-family: 'Open Sans', sans-serif;
  }

  /* These two tags are semantic, so I think its okay to apply styles to them directly in the global styles. */
  strong {
    @apply font-extrabold;
  }

  em {
    @apply italic;
  }
}

/* 

The default tailwind way to do this uses a psuedo element selector, which
means that anything not editable is "read only", including things
like <select>. 

This custom variant lets you target only elements with the readonly attribute.

*/
@custom-variant is-read-only (&[readonly]);

@utility focusable {
  @apply ring-offset-background focus-visible:ring-accent transition-colors focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-hidden;
}
