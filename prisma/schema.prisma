generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  key          Key[]
  auth_session Session[]
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
}

model Protocol {
  id            String      @id @default(cuid())
  hash          String      @unique
  name          String
  schemaVersion Int
  description   String?
  importedAt    DateTime    @default(now())
  lastModified  DateTime
  stages        Json
  codebook      Json
  experiments   Json?
  interviews    Interview[]
  assets        Asset[]     @relation("AssetToProtocol")
}

model Asset {
  key       String     @id
  assetId   String     @unique
  name      String
  type      String
  url       String
  size      Int
  value     String?
  protocols Protocol[] @relation("AssetToProtocol")

  @@index([assetId, key])
}

model Interview {
  id            String      @id @default(cuid())
  startTime     DateTime    @default(now())
  finishTime    DateTime?
  exportTime    DateTime?
  lastUpdated   DateTime    @updatedAt
  network       Json
  participantId String
  protocolId    String      @map("protocolId")
  currentStep   Int         @default(0)
  stageMetadata Json?
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  protocol      Protocol    @relation(fields: [protocolId], references: [id], onDelete: Cascade)

  @@index([protocolId])
  @@index([participantId])
}

model Participant {
  id         String      @id @unique @default(cuid())
  identifier String      @unique
  label      String?
  interviews Interview[]
}

model AppSettings {
  key   AppSetting @unique
  value String
}

model Events {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  type      String
  message   String
}

enum AppSetting {
  configured
  allowAnonymousRecruitment
  limitInterviews
  initializedAt
  installationId
  disableAnalytics
  uploadThingToken
  disableSmallScreenOverlay
}
